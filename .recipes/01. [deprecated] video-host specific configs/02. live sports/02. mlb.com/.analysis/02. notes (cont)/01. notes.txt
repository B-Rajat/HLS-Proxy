--------------------------------------------------------------------------------

analysis:
=========

* find an HLS for a game in-progress:
  - https://www.reddit.com/r/mlbstreams/
  - https://www.reddit.com/r/MLBStreams/comments/9bp6he/game_thread_dbacks_at_dodgers_1000_pm_et/
  - http://bilasport.net/game/los-angeles-dodgers-vs-arizona-diamondbacks-7691.html
      * does NOT play in any of the HTML5 video players included on the "Webcast-Reloaded" external website (ie: THEOplayer, VisualOn, etc)
  - http://bilasport.net/mlb/dodgers.html
      * embedded iframe that contains only the video player
      * very clean page to work with..

* interesting:
  - the player DOES includes some clever hook functions to intercept and redirect key URLs:
      * search:
          'https://playback.svcs.mlb.com/events/'
        replace:
          'http://bilasport.net/keys/Dodgers.file?'

--------------------------------------------------------------------------------

<!DOCTYPE html>
<head>
  <script src="https://cdn.jsdelivr.net/clappr/latest/clappr.min.js" type="text/javascript"></script>
  <script src="https://cdn.jsdelivr.net/clappr.level-selector/latest/level-selector.min.js" type="text/javascript"></script>
  <script src="https://cdn.jsdelivr.net/clappr.chromecast-plugin/latest/clappr-chromecast-plugin.js"></script>
  <style>#player {width: 640px; height: 360px;}</style>
  <meta http-equiv="cache-control" content="max-age=0" />
  <meta http-equiv="cache-control" content="no-cache" />
  <meta http-equiv="pragma" content="no-cache" />
  <script>
    var video_url = "https://hlslive-l3c-ewr1.media.mlb.com/ls01/mlb/2018/08/31/Home_VIDEO_eng_Arizona_Diamondbacks_Los__20180831_1535672988710/master_desktop_complete.m3u8"
  </script>
</head>
<body>
  <div id="player"></div>
  <script>
    var player = new Clappr.Player({
      source:   video_url,
      mimeType: 'application/x-mpegURL',
      width:    '100%',
      height:   '100%',
      autoPlay: false,
      parentId: '#player',
      plugins: {
        core:   [ChromecastPlugin, LevelSelector]
      },
      chromecast: {
        appId:  '9DFB77C0'
      }
    });
    (function(open) {
      XMLHttpRequest.prototype.open = function(method, url, async, user, pass) {
        if (url.toLowerCase().indexOf('fwmrm.net') >= 0) {
          return;
        }
        var rewrittenUrl = url;
        rewrittenUrl = rewrittenUrl.replace('https://playback.svcs.mlb.com/events/', 'http://bilasport.net/keys/Dodgers.file?');
        open.call(this, method, rewrittenUrl, async, user, pass);
      };
    })(XMLHttpRequest.prototype.open);
  </script>
</body>
</html>

--------------------------------------------------------------------------------

result of running the above page (from file:/):
===============================================
Failed to load
    http://bilasport.net/keys/Dodgers.file?0d840cc4-0884-452f-9982-f780291fb617/media/b0a041de-4414-4bb3-b111-57d2d31a16b4/keys/23b9a5c6-244c-44f6-b49b-db544f99de82
No 'Access-Control-Allow-Origin' header is present on the requested resource.
Origin 'null' is therefore not allowed access.

workaround:
===========
* use a Chrome extension to modify the HTTP response headers from "bilasport.net",
  to inject permissive CORS settings
* https://github.com/warren-bank/crx-cors-lite/releases
    - URL regex pattern:
        bilasport.net/keys/

result:
=======
* it WORKS!

--------------------------------------------------------------------------------

Chromecast:
===========
* obviously, after clappr casts the URL of the .m3u8 manifest to Chromecast..
  the javascript hook function to intercept XHR requests and conditionally redirect the encryption key URLs to another server..
  would be removed from the equation, and the HLS stream would no-longer be able to be decrypted..
  since Chromecast would request the encryption keys from the real MLB video server..
  and be denied

* https://www.reddit.com/r/Chromecast/comments/7jg0nw/i_just_get_the_message_clappr_when_trying_to_cast/
    - this is what happens when people try to cast from the clappr video player on a (pirate) website,
      without using any kind of workaround to obtain the necessary encryption keys

workaround:
===========
* HLS-Proxy could easy be extended with an optional hook function..
  and enable the same functionality
* it would require knowing the URL of a server hosting the encryption key files,
  but that URL could easily be extracted from any page hosting such a stream
    - a user-script (Chrome extension) could be used to automate this task

--------------------------------------------------------------------------------

related article:
================
* https://adma.re/blog/Pirate-BAMTECH
    - an analysis of MLB HLS stream encryption,
      and why it can be pirated so easily..

--------------------------------------------------------------------------------
